-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dbfs_converter_log10_48_24_s_log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_ROM_AUTOdEe is 
    generic(
             DataWidth     : integer := 30; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of dbfs_converter_log10_48_24_s_log_apfixed_reduce_log_lut_table_ap_fixed_7_6_64_array_ROM_AUTOdEe is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000000000000000000000000000000", 1 => "000001000000000000000000000000", 2 => "000010000000000000100000000000", 3 => "000011000000000001100000000001", 
    4 => "000100000000000011000000000011", 5 => "000101000000000101000000000111", 6 => "000110000000000111100000001101", 7 => "000111000000001010100000010110", 
    8 => "001000000000001110000000100011", 9 => "001001000000010010000000110011", 10 => "001010000000010110100001000111", 11 => "001011000000011011100001100000", 
    12 => "001100000000100001000001111110", 13 => "001101000000100111000010100010", 14 => "001110000000101101100011001101", 15 => "001111000000110100100011111110", 
    16 => "010000000000111100000100110110", 17 => "010001000001000100000101110110", 18 => "010010000001001100100110111111", 19 => "010011000001010101101000010000", 
    20 => "010100000001011111001001101011", 21 => "010101000001101001001011001111", 22 => "010110000001110011101100111101", 23 => "010111000001111110101110110111", 
    24 => "011000000010001010010000111011", 25 => "011001000010010110010011001100", 26 => "011010000010100010110101101001", 27 => "011011000010101111111000010010", 
    28 => "011100000010111101011011001001", 29 => "011101000011001011011110001110", 30 => "011110000011011010000001100001", 31 => "011111000011101001000101000011", 
    32 => "100000000011111000101000110100", 33 => "100001000100001000101100110101", 34 => "100010000100011001010001000110", 35 => "100011000100101010010101101000", 
    36 => "100100000100111011111010011100", 37 => "100101000101001101111111100001", 38 => "100110000101100000100100111001", 39 => "100111000101110011101010100100", 
    40 => "101000000110000111010000100010", 41 => "101001000110011011010110110100", 42 => "101010000110101111111101011010", 43 => "101011000111000101000100010110", 
    44 => "101100000111011010101011100110", 45 => "101101000111110000110011001101", 46 => "101110001000000111011011001010", 47 => "101111001000011110100011011110", 
    48 => "110000001000110110001100001010", 49 => "110001001001001110010101001101", 50 => "110010001001100110111110101001", 51 => "110011001010000000001000011110", 
    52 => "110100001010011001110010101100", 53 => "110101001010110011111101010100", 54 => "110110001011001110101000010111", 55 => "110111001011101001110011110101", 
    56 => "111000001100000101011111101110", 57 => "111001001100100001101100000100", 58 => "111010001100111110011000110110", 59 => "111011001101011011100110000101", 
    60 => "111100001101111001010011110001", 61 => "111101001110010111100001111100", 62 => "111110001110110110010000100101", 63 => "111111001111010101011111101110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

