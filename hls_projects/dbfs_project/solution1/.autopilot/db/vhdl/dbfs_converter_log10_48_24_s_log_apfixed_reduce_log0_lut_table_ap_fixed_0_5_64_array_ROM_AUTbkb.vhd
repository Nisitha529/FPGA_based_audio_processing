-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dbfs_converter_log10_48_24_s_log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_ROM_AUTbkb is 
    generic(
             DataWidth     : integer := 37; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of dbfs_converter_log10_48_24_s_log_apfixed_reduce_log0_lut_table_ap_fixed_0_5_64_array_ROM_AUTbkb is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111111101111100000111111111110101011", 1 => "1111111101111100000111111111110101011", 2 => "1111111101111100000111111111110101011", 3 => "0000011110011100110011101100001001001", 
    4 => "0000011110011100110011101100001001001", 5 => "0001000000000001101110001011001011110", 6 => "0001000000000001101110001011001011110", 7 => "0001100010101111011111100101101010110", 
    8 => "0001100010101111011111100101101010110", 9 => "0001100010101111011111100101101010110", 10 => "0010000110101011001111010000000110101", 11 => "0010000110101011001111010000000110101", 
    12 => "0010101011111010101000001101010000000", 13 => "0010101011111010101000001101010000000", 14 => "0010101011111010101000001101010000000", 15 => "0011010010100011111110100111011001101", 
    16 => "0011010010100011111110100111011001101", 17 => "0011010010100011111110100111011001101", 18 => "0011111010101110010110001101011011000", 19 => "0011111010101110010110001101011011000", 
    20 => "0011111010101110010110001101011011000", 21 => "0011111010101110010110001101011011000", 22 => "0100100100100001101010000100001000101", 23 => "0100100100100001101010000100001000101", 
    24 => "0100100100100001101010000100001000101", 25 => "0100100100100001101010000100001000101", 26 => "0101010000000110110110000001101000111", 27 => "0101010000000110110110000001101000111", 
    28 => "0101010000000110110110000001101000111", 29 => "0101010000000110110110000001101000111", 30 => "0101111101101000000010001110110010111", 31 => "0101111101101000000010001110110010111", 
    32 => "1011001111011000100101010001000111010", 33 => "1011001111011000100101010001000111010", 34 => "1011100111011110101011010100111010101", 35 => "1011100111011110101011010100111010101", 
    36 => "1100000000001001111011110010001010011", 37 => "1100000000001001111011110010001010011", 38 => "1100000000001001111011110010001010011", 39 => "1100011001011100001100000110111000100", 
    40 => "1100011001011100001100000110111000100", 41 => "1100011001011100001100000110111000100", 42 => "1100110011010111011010101100001101110", 43 => "1100110011010111011010101100001101110", 
    44 => "1101001101111101101111110001110000001", 45 => "1101001101111101101111110001110000001", 46 => "1101001101111101101111110001110000001", 47 => "1101101001010001011110100000110100011", 
    48 => "1101101001010001011110100000110100011", 49 => "1101101001010001011110100000110100011", 50 => "1110000101010101000110001000111100101", 51 => "1110000101010101000110001000111100101", 
    52 => "1110000101010101000110001000111100101", 53 => "1110000101010101000110001000111100101", 54 => "1110100010001011010011010111001001110", 55 => "1110100010001011010011010111001001110", 
    56 => "1110100010001011010011010111001001110", 57 => "1110111111110111000001111001110101010", 58 => "1110111111110111000001111001110101010", 59 => "1110111111110111000001111001110101010", 
    60 => "1110111111110111000001111001110101010", 61 => "1111011110011011011110010011100110111", 62 => "1111011110011011011110010011100110111", 63 => "1111011110011011011110010011100110111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

