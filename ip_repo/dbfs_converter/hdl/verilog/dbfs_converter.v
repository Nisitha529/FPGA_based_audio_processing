// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dbfs_converter_dbfs_converter,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.115000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=3355,HLS_SYN_LUT=4179,HLS_VERSION=2023_2}" *)

module dbfs_converter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        linear_value,
        ap_return
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [47:0] linear_value;
output  [47:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [47:0] select_ln154_fu_107_p3;
reg   [47:0] select_ln154_reg_208;
reg   [0:0] tmp_51_reg_213;
reg   [24:0] tmp_57_reg_218;
wire   [25:0] x_fu_169_p3;
reg   [25:0] x_reg_223;
wire    ap_CS_fsm_state2;
wire   [27:0] grp_log10_48_24_s_fu_70_ap_return;
reg   [27:0] ref_tmp5_reg_228;
wire    ap_CS_fsm_state23;
wire    grp_log10_48_24_s_fu_70_ap_start;
wire    grp_log10_48_24_s_fu_70_ap_done;
wire    grp_log10_48_24_s_fu_70_ap_idle;
wire    grp_log10_48_24_s_fu_70_ap_ready;
reg    grp_log10_48_24_s_fu_70_ap_start_reg;
reg   [23:0] ap_NS_fsm;
wire    ap_NS_fsm_state3;
wire    ap_CS_fsm_state3;
wire   [47:0] sub_ln152_fu_83_p2;
wire   [0:0] tmp_50_fu_99_p3;
wire   [47:0] tmp_fu_89_p4;
wire   [71:0] shl_ln7_fu_133_p3;
wire   [71:0] sub_ln7_fu_140_p2;
wire   [24:0] tmp_s_fu_146_p4;
wire   [25:0] zext_ln7_fu_156_p1;
wire   [25:0] sub_ln7_1_fu_163_p2;
wire   [25:0] zext_ln7_1_fu_160_p1;
wire    ap_CS_fsm_state24;
wire   [31:0] shl_ln8_fu_176_p3;
wire   [29:0] shl_ln8_1_fu_187_p3;
wire  signed [32:0] sext_ln8_fu_183_p1;
wire  signed [32:0] sext_ln8_1_fu_194_p1;
wire   [32:0] add_ln8_fu_198_p2;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 grp_log10_48_24_s_fu_70_ap_start_reg = 1'b0;
end

dbfs_converter_log10_48_24_s grp_log10_48_24_s_fu_70(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_log10_48_24_s_fu_70_ap_start),
    .ap_done(grp_log10_48_24_s_fu_70_ap_done),
    .ap_idle(grp_log10_48_24_s_fu_70_ap_idle),
    .ap_ready(grp_log10_48_24_s_fu_70_ap_ready),
    .x_val(x_reg_223),
    .ap_return(grp_log10_48_24_s_fu_70_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_log10_48_24_s_fu_70_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state3) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_log10_48_24_s_fu_70_ap_start_reg <= 1'b1;
        end else if ((grp_log10_48_24_s_fu_70_ap_ready == 1'b1)) begin
            grp_log10_48_24_s_fu_70_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ref_tmp5_reg_228 <= grp_log10_48_24_s_fu_70_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        select_ln154_reg_208 <= select_ln154_fu_107_p3;
        tmp_51_reg_213 <= select_ln154_fu_107_p3[32'd47];
        tmp_57_reg_218 <= {{select_ln154_fu_107_p3[47:23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_223 <= x_fu_169_p3;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln8_fu_198_p2 = ($signed(sext_ln8_fu_183_p1) + $signed(sext_ln8_1_fu_194_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_NS_fsm_state3 = ap_NS_fsm[32'd2];

assign ap_return = $signed(add_ln8_fu_198_p2);

assign grp_log10_48_24_s_fu_70_ap_start = grp_log10_48_24_s_fu_70_ap_start_reg;

assign select_ln154_fu_107_p3 = ((tmp_50_fu_99_p3[0:0] == 1'b1) ? tmp_fu_89_p4 : linear_value);

assign sext_ln8_1_fu_194_p1 = $signed(shl_ln8_1_fu_187_p3);

assign sext_ln8_fu_183_p1 = $signed(shl_ln8_fu_176_p3);

assign shl_ln7_fu_133_p3 = {{select_ln154_reg_208}, {24'd0}};

assign shl_ln8_1_fu_187_p3 = {{ref_tmp5_reg_228}, {2'd0}};

assign shl_ln8_fu_176_p3 = {{ref_tmp5_reg_228}, {4'd0}};

assign sub_ln152_fu_83_p2 = (48'd0 - linear_value);

assign sub_ln7_1_fu_163_p2 = (26'd0 - zext_ln7_fu_156_p1);

assign sub_ln7_fu_140_p2 = (72'd0 - shl_ln7_fu_133_p3);

assign tmp_50_fu_99_p3 = linear_value[32'd47];

assign tmp_fu_89_p4 = {|(1'd0), sub_ln152_fu_83_p2[47 - 1:0]};

assign tmp_s_fu_146_p4 = {{sub_ln7_fu_140_p2[71:47]}};

assign x_fu_169_p3 = ((tmp_51_reg_213[0:0] == 1'b1) ? sub_ln7_1_fu_163_p2 : zext_ln7_1_fu_160_p1);

assign zext_ln7_1_fu_160_p1 = tmp_57_reg_218;

assign zext_ln7_fu_156_p1 = tmp_s_fu_146_p4;

endmodule //dbfs_converter
